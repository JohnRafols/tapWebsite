<?php 

require 'email_co_workers.php';


function tap_job_invite_help($path, $arg) {
	switch ($path) {
		case "admin/help#tap_job_invite":
			return '<p>' . t("Invite Co-Workers/Collaborators to jobs.") . '</p>';
		break;
	}
}

function tap_job_invite_menu(){    

    $items['job/%/invite'] = array(
        'title'             => 'Invite Co-Workers/Collaborators on Tap',
        'description'       => t('Invite co-workers/Collaborators.'),
        'access callback'   => 'user_access',
        'access arguments'  => array('access content'),
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_job_invite_form_builder', 1),
    );

    //Autocomplete of the names of collaborators to invite.
    $items['collaborator/autocomplete'] = array(
        'title' => 'Autocomplete for collaborators',
        'page callback' => '_tap_job_invite_autocomplete',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );
        
    return $items;
}

function tap_job_invite_form_builder($form, &$form_state, $jobid=''){
    $attach_form = array();
    $node = node_load((int) $jobid);
    field_attach_form('node', $node, $attach_form, $form_state, NULL, array('field_name' => 'field_co_workers'));
    $form['some_text'] = array(
        '#markup' => '<p id="invite_coworker_desc">Add your Co-workers\' email addresses. Coworkers must have a Client account on Tap. They will be able to oversee your Project.</p>'
    );
    $form['field_coworkers'] = $attach_form['field_co_workers'];
    $form['submit'] = array(
        '#type'         => 'submit',
        '#value'        => t('Submit'),
        '#weight'       => 10000,
    );

    foreach($form['field_coworkers']['und'] as $key => $coworker_field){        
        if(is_numeric($key)){
            $form['field_coworkers']['und'][$key]['uid']['#autocomplete_path'] = 'collaborator/autocomplete';
        }
    }

    return $form;
}

function tap_job_invite_multiple_field_remove_button_field_widgets_alter(&$fieldwidgets) {
  // Add new widget type in $fieldwidgets    
    array_push($fieldwidgets, 'user_reference_autocomplete');    
    return $fieldwidgets;
}

function tap_job_invite_form_builder_validate($form, &$form_state){
    $nid=(int)$form_state['build_info']['args'][0];
    $node=node_load($nid);

    $existing_coworkers = array();
    if(array_key_exists('und', $node->field_co_workers)){
        foreach($node->field_co_workers['und'] as $existing_coworker){
            array_push($existing_coworkers, $existing_coworker['uid']);
        }
    }

    $new_ids = array();
    foreach($form_state['input']['field_coworkers']['und'] as $coworker){
        $openBrackPos=strpos($coworker['uid'], '[uid:')+4;
        $closeBrackPos=strpos($coworker['uid'], ']');
        $id=(int) substr($coworker['uid'], $openBrackPos+1, $closeBrackPos-$openBrackPos-1);
        if($id != 0){ // Account for empty text fields.
            if(!in_array($id, $existing_coworkers)){
                array_push($new_ids, $id);
            }
        }                    
    }

    if(!empty($new_ids)){
        $query = db_select('users_roles', 'r')
            ->fields('r', array('uid'))
            ->condition('uid', ($new_ids), 'IN');

        $db_or = db_or();
        $db_or->condition('r.rid', '5', '='); // Client
        $db_or->condition('r.rid', '8', '='); // ApprovedFreelancer
        $db_or->condition('r.rid', '9', '='); // TestFreelancer

        $query->condition($db_or);
        $result = $query->execute();

        $valid_ids = array();
        foreach ($result as $row) {
            array_push($valid_ids, (int) $row->uid);
        }

        foreach($new_ids as $new_id){
            if(!in_array($new_id, $valid_ids)){
                form_set_error('field_co_workers', "User [uid:$new_id] is not a Client or an approved Creative Pro on Tap.");
            }
        }
    }
}


function tap_job_invite_form_builder_submit($form, &$form_state){
    // debug("hello");
    // debug($form_state);

    $nid=(int)$form_state['build_info']['args'][0];
    $node=node_load($nid);

    $existing_coworkers = array();
    if(array_key_exists('und', $node->field_co_workers)){
        foreach($node->field_co_workers['und'] as $existing_coworker){
            array_push($existing_coworkers, $existing_coworker['uid']);
        }
    }

    // Get the newly updated co-workers list.
    // Get the list with new ids in the updated list.
    $updated_ids = array();
    $new_ids = array();
    foreach($form_state['input']['field_coworkers']['und'] as $coworker){
        $openBrackPos=strpos($coworker['uid'], '[uid:')+4;
        $closeBrackPos=strpos($coworker['uid'], ']');
        $id=(int) substr($coworker['uid'], $openBrackPos+1, $closeBrackPos-$openBrackPos-1);
        if($id != 0){ // Account for empty text fields.
            array_push($updated_ids, $id);
            if(!in_array($id, $existing_coworkers)){
                array_push($new_ids, $id);
            }
        }                    
    }

    // Get the list of coworkers who have been removed.
    $removed_coworkers = array();
    foreach($existing_coworkers as $existing){
        if(!in_array($existing, $updated_ids)){
            array_push($removed_coworkers, $existing);
        }
    }

    // Remove coworkers from the existing job node.
    if(array_key_exists('und', $node->field_co_workers)){
        foreach($node->field_co_workers['und'] as $key => $co_worker){
            $current_id = $co_worker['uid'];
            if(in_array($current_id, $removed_coworkers)){
                unset($node->field_co_workers['und'][$key]);
            }
        }
    }

    if(empty($node->field_co_workers['und'])){
        unset($node->field_co_workers['und']);
    }

    // Add coworkers to the existing job node.
    if(!empty($new_ids)){
        //Remove duplicate collaborators
        $new_ids=array_unique($new_ids, SORT_NUMERIC);          

        if(array_key_exists('und', $node->field_co_workers)){
            foreach($new_ids as $id){                    
                $uidArr=array('uid'=>$id);
                array_push($node->field_co_workers['und'], $uidArr);
            }                
        }else{
            $node->field_co_workers['und']=array();
            foreach($new_ids as $id){                    
                $uidArr=array('uid'=>$id);
                array_push($node->field_co_workers['und'], $uidArr);
            }                
        }
    }

    if(!empty($new_ids)){        
        //Save added/removed collaborators to DB.
        // $node->field_co_workers = array_values($node->field_co_workers);
        node_save($node);
        emailCollaborators($new_ids, $node);
        drupal_set_message("Co-workers invited.");
    }

    if(!empty($removed_coworkers)){
        $node->field_co_workers = array_values($node->field_co_workers);
        node_save($node);
        drupal_set_message("Co-workers removed.");
    }

    // debug($node);
    //redirect user back to job page.
    drupal_goto("/node/".$nid);
}

function _tap_job_invite_autocomplete($string=''){
    $matches = array();

    // Username
    $query = db_select('users', 'us')
        ->fields('us', array('uid', 'name', 'mail'))
        ->condition('mail', '%' . db_like($string) . '%', 'LIKE');

    // //first name
    // $query = db_select('field_data_field_user_first_name', 'fn')
    //     ->fields('fn', array('entity_id', 'field_user_first_name_value'))
    //     ->condition('field_user_first_name_value', '%' . db_like($string) . '%', 'LIKE');

    // //last name
    // $query->join('field_data_field_user_last_name', 'ln', 'fn.entity_id = ln.entity_id');
    // $query->fields('ln', array('field_user_last_name_value'));

    
    //only users of role Client.
    $query->join('users_roles', 'r', 'r.uid = us.uid');

    $db_or = db_or();
    $db_or->condition('r.rid', '5', '='); // Client
    $db_or->condition('r.rid', '8', '='); // ApprovedFreelancer
    $db_or->condition('r.rid', '9', '='); // TestFreelancer

    $query->condition($db_or);

    //Get pid (Profile2 primary key) of Client or authenticated_user (in cases where the admin creates the client user account)
    // $query->join('profile', 'p', 'p.uid = fn.entity_id');
    // $db_or = db_or();
    // $db_or->condition('p.type', 'client', '=');
    // // $db_or->condition('p.type', 'authenticated_user', '=');  
    // $query->fields('p', array('pid'))
    //     ->condition($db_or);

    // //Use pid to get the client's company_name.
    // $query->leftJoin('field_data_field_company_name', 'c','p.pid = c.entity_id');
    // $query->fields('c', array('field_company_name_value'));

    $joined = $query->execute();

    // save the query to matches
    foreach ($joined as $row) {
        // $fn=ucfirst(check_plain($row->field_user_first_name_value));
        // $ln=ucfirst(check_plain($row->field_user_last_name_value));
        // $co=check_plain($row->field_company_name_value);
        $username = check_plain($row->name);
        $mail = check_plain($row->mail);

        // $matches[$row->entity_id] = "<b>{$fn} {$ln}</b> from <b>{$co}</b>";
        $matches["{$username} [uid:{$row->uid}]"] = "<b>{$mail} ({$username})</b>";
    }

    drupal_json_output($matches);
}


?>