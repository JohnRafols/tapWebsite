<?php
/**
 * @file
 * Image style hooks to have predefined styles.
 */

require_once dirname(__FILE__) . '/advanced_crop.image_styles.inc';

/**
 * @file
 * Image cropping effect hooks and callbacks.
 */

require_once dirname(__FILE__) . '/advanced_crop.effects.inc';

define('ADVANCED_IMAGE_CROPPER_PATH', drupal_get_path('module', 'advanced_crop'));

/**
 * Implements hook_element_info_alter().
 */
function advanced_crop_element_info_alter(&$types) {
  if (isset($types['media'])) {
    // Override process callback.
    // See media module media_element_info().
    $types['media']['#process'] = array('advanced_crop_element_process');
  }
  return $types;
}

/**
 * Process callback for the media form element.
 *
 * @see advanced_crop_element_info_alter()
 */
function advanced_crop_element_process($element, &$form_state, $form) {
  // Call parent hook.
  $element = media_element_process($element, $form_state, $form);
  $element['#media_options']['global']['field_name'] = $element['#field_name'];
  // Append 'use_advanced_crop' to  image edit link href.
  if (isset($form_state['field'][$element['#field_name']][$element['#language']]['instance']['settings']['advanced_crop'])) {
    $element['edit']['#href'] = $element['edit']['#href'] . '/use_advanced_crop';
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_crop_form_file_entity_add_upload_alter(&$form, &$form_state) {
  // Add image cropper to the file entity edit form used by the media browser.
  if (_advanced_crop_supported_field_type('media') && isset($form_state['step']) && $form_state['step'] == 4 && isset($form['#options']['advanced_crop']) && $form['#options']['advanced_crop'] == 1) {
    $fid = isset($form_state['values']['upload']) ? $form_state['values']['upload'] : $form_state['storage']['upload'];
    $file = file_load($fid);
    if (_advanced_crop_supported_file($file)) {
      $form['preview'] = _advanced_crop_get_preview_thumb($file);
      $form['crop_data'] = _advanced_crop_get_hidden_fields();
      $form['file_data'] = _advanced_crop_get_js_settings($file);
      if (module_exists('focal_point')) {
        $form['image_cropper_used'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use advanced cropper image.'),
          '#default_value' => 0,
        );
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_crop_form_file_entity_edit_alter(&$form, &$form_state) {
  // Make sure we have an entity to work with.
  if (!isset($form['#entity'])) {
    return;
  }
  if (_advanced_crop_supported_field_type('media') && _advanced_crop_supported_file($form['#entity']) && in_array('use_advanced_crop', explode('/', current_path()))) {
    $fid = $form_state['build_info']['args'][0]->fid;
    $form['preview'] = _advanced_crop_get_preview_thumb((int) $fid);
    $form['crop_data'] = _advanced_crop_get_hidden_fields(_advanced_crop_decode_crop_data($form['#entity']->crop_data));
    $form['file_data'] = _advanced_crop_get_js_settings((int) $fid);
    if (module_exists('focal_point')) {
      $form['image_cropper_used'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use image cropper image.'),
        '#default_value' => ($form['#entity']->crop_data) ? 1 : 0,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_crop_form_node_form_alter(&$form, &$form_state) {
  foreach (field_info_field_map() as $name => $field) {
    if (_advanced_crop_supported_field_type($field['type'])) {
      $lang = isset($form[$name]['#language']) ? $form[$name]['#language'] : LANGUAGE_NONE;
      $delta = isset($form[$name][$lang]['#file_upload_delta']) ? $form[$name][$lang]['#file_upload_delta'] : 0;
      $form[$name][$lang][$delta]['#media_options']['global']['advanced_crop'] = isset($form_state['field'][$name][$lang]['instance']['settings']['advanced_crop']) ? $form_state['field'][$name][$lang]['instance']['settings']['advanced_crop'] : FALSE;
    }
  }
}

/**
 * Implements hook_file_load().
 */
function advanced_crop_file_load($files) {
  $crop_data = _advanced_crop_get_multiple_crop_data(array_keys($files));
  foreach ($files as &$file) {
    $file->crop_data = isset($crop_data[$file->fid]) ? $crop_data[$file->fid] : '';
  }
}

/**
 * Implements hook_file_presave().
 */
function advanced_crop_file_presave($file) {
  if (module_exists('focal_point') && empty($file->image_cropper_used)) {
    _advanced_crop_delete($file->fid);
    return;
  }
  if (isset($file->fid) && isset($file->crop_data) && is_array($file->crop_data)) {
    $crop_data = array();
    foreach ($file->crop_data as $style_name => $style_data) {
      if ($style_data != '') {
        $crop_data[$style_name] = json_decode($style_data, TRUE);
      }
    }
    _advanced_crop_save_crop_data($file->fid, json_encode($crop_data));
    //To delete the focal point data.
    if (module_exists('focal_point')) {
      focal_point_delete($file->fid);
    }
  }
}

/**
 * Implements hook_file_delete().
 */
function advanced_crop_file_delete($file) {
  _advanced_crop_delete($file->fid);
}

/**
 * Implements hook_file_update().
 */
function advanced_crop_file_update($file) {
  if ($file->original->uri != $file->uri) {
    // Delete crop data if file changed.
    _advanced_crop_delete($file->fid);
  }
}

/**
 * Helper function to build a render array for the preview image.
 *
 * @param mixed $file
 *   Either a loaded file object or an fid.
 *
 * @see advanced_crop_form_file_entity_add_upload_alter()
 * @see advanced_crop_form_file_entity_edit_alter()
 */
function _advanced_crop_get_preview_thumb($file) {
  drupal_add_library('system', 'ui');
  if (is_int($file)) {
    $file = file_load($file);
  }

  $variables = array(
    // @see advanced_crop.image_styles.inc.
    'style_name' => 'advanced_crop_preview',
    'path' => $file->uri,
    'alt' => $file->alt,
    'title' => $file->title,
    'attributes' => array(
      'id' => 'image-cropper-preview-thumb',
    ),
  );

  $preview = array(
    'thumbnail' => array(
      '#type' => 'markup',
      '#prefix' => '<div><strong>' . t('Advanced image cropping') . '</strong></div>',
      '#markup' => theme('image_style', $variables),
      '#attached' => array(
        'css' => array(
          ADVANCED_IMAGE_CROPPER_PATH . '/css/advanced_crop.css',
        ),
        'js' => array(
          ADVANCED_IMAGE_CROPPER_PATH . '/js/advanced_crop.js',
        ),
      ),
    ),
  );

  // Set JavaScript data.
  $image_size = getimagesize($file->uri);
  drupal_add_js(array(
    'advanced_crop' => array(
      'image' => array(
        'url' => file_create_url($file->uri),
        'width' => $image_size[0],
        'height' => $image_size[1],
      ),
    ),
  ),
    'setting'
  );

  return $preview;
}
/**
 * Helper function to save the image data for a given file ID.
 *
 * @param mixed file values
 *   Either a loaded file object or an fid.
 * @see advanced_crop_form_file_entity_add_upload_alter()
 * @see advanced_crop_form_file_entity_edit_alter()
 */
function _advanced_crop_get_js_settings($file) {
  if (is_int($file)) {
    $file = file_load($file);
  }
  $field = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => 'image-cropper-image-info',
    ),
  );

  // Set default value.
  $image_size = getimagesize($file->uri);
  $default_values['image']['width'] = $image_size[0];
  $default_values['image']['height'] = $image_size[1];
  $default_values['image']['url'] = file_create_url($file->uri);
  $field['#default_value'] = json_encode($default_values);
  return $field;
}

/**
 * Helper function to save the crop data for a given file ID.
 *
 * @param int $fid
 *   The fid of the image in question.
 * @param string $crop_data
 *   JSON encoded crop data.
 */
function _advanced_crop_save_crop_data($fid, $crop_data) {
  $existing_record = _advanced_crop_get_crop_data($fid);

  $record = array(
    'fid' => $fid,
    'crop_data' => $crop_data,
  );

  if (empty($existing_record)) {
    // Write new record.
    drupal_write_record('advanced_crop', $record);
  }
  else {
    // Update existing record.
    drupal_write_record('advanced_crop', $record, 'fid');
    _advanced_crop_flush_image($fid);
  }

  // Clear the static caches.
  $cached = &drupal_static('_advanced_crop_get_multiple_crop_data');
  unset($cached[$fid]);
  entity_get_controller('file')->resetCache(array($fid));
}

/**
 * Helper function to fetch the crop data for the given file ID from the database.
 *
 * @param int $fid
 *   The fid of the image in question.
 *
 * @return string
 *   In the form {'promotional_image_16_9': {x: XX, y: XX, width: XX, height: XX}, ...}.
 *   If no crop data is found an empty string is returned.
 */
function _advanced_crop_get_crop_data($fid) {
  $result = _advanced_crop_get_multiple_crop_data(array($fid));
  return isset($result[$fid]) ? $result[$fid] : '';
}

/**
 * Helper function to fetch the crop data for the given file IDs from the database.
 *
 * @param array $fids
 *   An array of file IDs.
 *
 * @return array
 *   An array of crop data keyed by file IDs.
 */
function _advanced_crop_get_multiple_crop_data(array $fids) {
  $crop_data = &drupal_static(__FUNCTION__, array());

  $missing = array_diff($fids, array_keys($crop_data));
  if ($missing) {
    $result = db_query('SELECT fid, crop_data FROM {advanced_crop} WHERE fid IN (:fids)', array(':fids' => $missing))->fetchAllKeyed();
    $crop_data += $result;
  }

  return array_intersect_key($crop_data, drupal_map_assoc($fids));
}

/**
 * Helper function to create the hidden form fields for the cropper widget.
 *
 * @param array $default_values
 *   An array of default values for the fields.
 *
 * @return array
 *   An array of form fields.
 */
function _advanced_crop_get_hidden_fields(array $default_values = array()) {
  $fields = array(
    '#tree' => TRUE,
  );

  $styles = _advanced_crop_get_image_styles();

  // Iterate through styles and build hidden fields.
  foreach ($styles as $style_name => $style) {
    $style_data = $style['effect']['data'];

    $field = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'id' => 'image-cropper-crop-field-' . $style_name,
        'class' => 'image-cropper-crop-field',
        'data-label' => $style['label'],
        'data-min-width' => $style_data['width'],
        'data-min-height' => $style_data['height'],
      ),
    );

    // Set default value.
    $field['#default_value'] = isset($default_values[$style_name]) ? json_encode($default_values[$style_name]) : '';
    $field['#attributes']['data-original-value'] = $field['#default_value'];

    $fields[$style_name] = $field;
  }

  return $fields;
}

/**
 * Helper function that gets a list of all image styles that use image cropper effect.
 *
 * @return array
 *   A subset of the array returned by image_styles().
 *
 * @see image_styles()
 */
function _advanced_crop_get_image_styles() {
  // Load all image styles defined on this site and filter out those that do
  // not use an image cropper effect.
  module_load_include('inc', 'advanced_crop', 'advanced_crop.effects');
  $effects = array_keys(advanced_crop_image_effect_info());

  $styles = array();
  $available_styles = image_styles();
  foreach ($available_styles as $isid => $style) {
    foreach ($style['effects'] as $effect) {
      if (in_array($effect['name'], $effects, TRUE)) {
        $label = ucwords($style['label']);
        $styles[$isid] = array(
          'label' => $label,
          'effect' => $effect,
        );
        break;
      }
    }
  }

  return $styles;
}

/**
 * Helper function to determine whether or not the provided field can use image cropper.
 *
 * @param string $type
 *   A drupal field widget type.
 *
 * @return bool
 *   Whether or not the given type is supported.
 */
function _advanced_crop_supported_widget_type($type) {
  $supported = FALSE;

  if (_advanced_crop_supported_field_type('image')) {
    $supported_widget_types = array('image_image', 'image_miw');
    drupal_alter('advanced_crop_supported_widget_types', $supported_widget_types);

    if (in_array($type, $supported_widget_types)) {
      $supported = TRUE;
    }
  }
  return $supported;
}

/**
 * Helper function to determine if the site is configured to enable image cropper on the given widget type.
 *
 * @param string $type
 *   The type of image field in question. image | media.
 *
 * @return bool
 *   Whether or not the given type is supported.
 */
function _advanced_crop_supported_field_type($type) {
  $enabled_for = variable_get('advanced_crop_style_types', array('image', 'media'));
  return in_array($type, $enabled_for, TRUE);
}

/**
 * Helper function to determine whether or not the provided file entity supports image cropper.
 *
 * @param mixed $file
 *   Either a loaded file object or an fid.
 *
 * @return bool
 *   Whether or not the given file is supported.
 */
function _advanced_crop_supported_file($file) {
  if (is_int($file)) {
    $file = file_load($file);
  }

  $supported_file_types = array('image');
  drupal_alter('advanced_crop_supported_file_types', $supported_file_types);

  return in_array($file->type, $supported_file_types);
}

/**
 * Helper function to decode the given crop data json string into an associative array.
 *
 * @param string $crop_data
 *   The crop data to be decoded.
 *
 * @return array
 *   An associative array of the crop data.
 */
function _advanced_crop_decode_crop_data($crop_data) {
  $crop_data = json_decode($crop_data, TRUE);
  if (!is_array($crop_data)) {
    return array();
  }
  return $crop_data;
}

/**
 * Helper function to delete the crop data for the given file entity.
 *
 * @param int $fid
 *   The fid of the image in question.
 */
function _advanced_crop_delete($fid) {
  _advanced_crop_flush_image($fid);
  db_delete('advanced_crop')
    ->condition('fid', $fid)
    ->execute();
}

/**
 * Helper function to flush generated images based on a file ID.
 *
 * @param int $fid
 *   The fid of the image in question.
 */
function _advanced_crop_flush_image($fid) {
  $file = file_load($fid);
  image_path_flush($file->uri);
}

function advanced_crop_field_info_alter(&$info) {
  // Add a setting to all field types.
  foreach ($info as $field_type => $field_type_info) {
    if (_advanced_crop_supported_field_type($field_type)) {
      $info['image']['instance_settings'] = array(
        'advanced_crop' => variable_get('advanced_crop_image_field_default_setting', 0),
      );
    }
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function advanced_crop_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $instance = $form['#instance'];
  $field = $form['#field'];
  if (_advanced_crop_supported_field_type($field['type'])) {
    if (empty($form['instance']['settings'])) {
      $form['instance']['settings'] = array();
    }
    $form['instance']['settings'] += advanced_crop_field_instance_settings_form($instance);
  }
}

/**
 * Configuration form for editing insert settings for a field instance.
 */
function advanced_crop_field_instance_settings_form($instance) {
  $form['advanced_crop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Advanced Crop Support'),
    '#default_value' => $instance['settings']['advanced_crop'],
    '#description' => t('Adds advanced crop support to the image field.'),
    '#weight' => 12,
  );
  return $form;
}
