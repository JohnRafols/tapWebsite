<?php

/**
 * @file
 * Bootstrap file for mforms toolkit. Moreover, it provides a set of
 * helper functions to simplify the use of the util classes.
 */


/**
 * Will init mforms for your module.
 *
 * @param string $module
 *   Name of module where the form is built.
 * @param string $store_key
 *   Store key.
 * @param MformsIstore $store
 *   Store object.
 * @param MformsIcontrols $controls
 *   Controls object.
 */
function mforms_init_module($module, $store_key, MformsIstore $store, MformsIcontrols $controls) {
  mforms_store_set($store_key, $store);
  mforms_controls_set($store_key, $controls);
  module_load_include('inc', $module, 'mforms/' . $module . '.' . $store_key);
}

/**
 * Sets store object into local cache.
 *
 * @param string $store_key
 *   Store key.
 * @param MformsIstore $instance
 *   Store object.
 *
 * @return MformsIstore
 *   Store object.
 */
function mforms_store_set($store_key, MformsIstore $instance = NULL) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data[$store_key]) && !empty($instance)) {
    $data[$store_key] = $instance;
  }

  if (isset($data[$store_key])) {
    return $data[$store_key];
  }

  return NULL;
}

/**
 * Gets store object from local cache.
 *
 * @param string $store_key
 *   Store key.
 *
 * @return MformsIstore
 *   Store object.
 */
function mforms_store_get($store_key) {
  return mforms_store_set($store_key);
}

/**
 * Sets controls object into local cache.
 *
 * @param string $store_key
 *   Store key.
 * @param MformsIcontrols $instance
 *   Controls object.
 *
 * @return MformsIcontrols
 *   Controls object.
 */
function mforms_controls_set($store_key, MformsIcontrols $instance = NULL) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data[$store_key]) && !empty($instance)) {
    $data[$store_key] = $instance;
  }

  if (isset($data[$store_key])) {
    return $data[$store_key];
  }

  return NULL;
}

/**
 * Gets controls object from local cache.
 *
 * @param string $store_key
 *   Store key.
 *
 * @return MformsIcontrols
 *   Controls object.
 */
function mforms_controls_get($store_key) {
  return mforms_controls_set($store_key);
}

/**
 * Wrapper to instantiate Mform object and call build action to get
 * the form definition.
 *
 * @param string $store_key
 *   Store key for which the form is built.
 * @param string $first_step
 *   First step to be called.
 * @param array $form_state
 *   Drupal's form_state.
 * @param array $params
 *   Additional params to be passed into the steps.
 *
 * @return array
 *   Drupal form definition.
 * @throws Exception
 */
function mforms_build($store_key, $first_step, &$form_state, $params = NULL) {

  // Invoke mform init hook.
  module_invoke_all($store_key . '_mforms_init');

  // Get instance of store object.
  $store = mforms_store_get($store_key);

  if (empty($store)) {
    throw new Exception('Mforms not initiated. Have you implemented hook_' . $store_key . '_mforms_init?');
  }

  $store->setFormState($form_state);

  // Get instance of steps object.
  $steps = MformsSteps::getInstance($store);

  // Get instance of controls object.
  $controls = mforms_controls_get($store_key);

  // Get instance of Mform.
  $mform = Mform::getInstance($store, $steps, $controls, $first_step);

  // Get the form definition for the provided step.
  $form = $mform->call('build', array(), $form_state, $params);

  // We do not have valid form - do not continue.
  if (empty($form) || !is_array($form)) {
    throw new Exception('Error retrieving form definition from step ' . $steps->getCurr());
  }

  // Add mforms info to be used in the init hook and getControls() method..
  $wrapper_id = 'mforms-wrapper-' . $store_key;

  $form['#prefix'] = '<div id="' . $wrapper_id . '">';
  $form['#suffix'] = '</div>';
  $form['#after_build'][] = '_mforms_form_after_build';

  $form['mforms_info'] = array(
    '#type' => 'value',
    '#value' => array(
      'wrapper_id' => $wrapper_id,
      'store_key' => $store_key,
    ),
  );

  // Add form controls.
  $form += $controls->getControls($form);

  return $form;
}

/**
 * Wrapper to instantiate Mform object and call validate action.
 *
 * @param string $store_key
 *   Store key for which the form is validated.
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 */
function mforms_validate($store_key, $form, &$form_state) {
  $store = mforms_store_get($store_key);
  $store->setFormState($form_state);

  $steps = MformsSteps::getInstance($store);
  $controls = mforms_controls_get($store_key);

  $mform = Mform::getInstance($store, $steps, $controls);
  $mform->call('validate', $form, $form_state);
}

/**
 * Wrapper to instantiate Mform object and call submit action.
 *
 * @param string $store_key
 *   Store key for which the form is submitted.
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 */
function mforms_submit($store_key, $form, &$form_state) {
  $store = mforms_store_get($store_key);
  $store->setFormState($form_state);

  $steps = MformsSteps::getInstance($store);
  $controls = mforms_controls_get($store_key);

  $mform = Mform::getInstance($store, $steps, $controls);
  $mform->call('submit', $form, $form_state);
}

/**
 * Cleans store for provided store key.
 *
 * @param string $store_key
 *   Store key of form for which the store should be cleaned.
 */
function mforms_clean($store_key) {
  $store = mforms_store_get($store_key);
  $store->clearStore();
}

/**
 * Retrieves submitted values form the store object.
 *
 * @param string $store_key
 *   Store key of form for which you want to get submitted values.
 * @param string $step
 *   Step (the name of form step callback) for which you want to get data.
 *
 * @return mixed
 *   Stored values.
 */
function mforms_get_vals($store_key, $step = NULL) {
  $store = mforms_store_get($store_key);

  if (empty($step)) {
    $steps = MformsSteps::getInstance($store);
    $step = $steps->getCurr();
  }

  return $store->getStore($step);
}

/**
 * Called on cancel action.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 */
function _mforms_cancel_submit($form, &$form_state) {

  // Only deal with cancel action if we have store key.
  if (isset($form_state['clicked_button']['#store_key'])) {
    // Get controls object and if we have cancel path we redirect there.
    $controls = mforms_controls_get($form_state['clicked_button']['#store_key']);
    $cancel_path = $controls->getCancelPath();
    if (!empty($cancel_path)) {
      drupal_goto($cancel_path);
    }
  }
}

/**
 * Will call mforms_submit on back/step action.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 */
function _mforms_back_submit($form, &$form_state) {

  // Only deal with back submit if we have store key.
  if (isset($form_state['clicked_button']['#store_key'])) {
    // Add $_POST into values as they got unset in the validation process due to
    // limit_validation_errors property of the back/step button.
    $form_state['values'] += $_POST;
    mforms_submit($form_state['clicked_button']['#store_key'], $form, $form_state);
  }
}

/**
 * Gets called on ajax form submit.
 *
 * @param array $form
 *   Drupal form array.
 *
 * @return array
 *   Drupal form array.
 */
function _mforms_ajax_get_form($form) {
  return $form;
}

/**
 * Called after form build to allow mforms initialization.
 *
 * @param array $form
 *   Drupal form.
 *
 * @return array
 *   Drupal form.
 */
function _mforms_form_after_build($form) {
  $store_key = $form['mforms_info']['#value']['store_key'];

  $store = mforms_store_get($store_key);

  if (empty($store)) {
    module_invoke_all($store_key . '_mforms_init');
  }

  return $form;
}
