<?php 

require 'jobHelperFunctions.php';

function tap_job_mgmt_help($path, $arg) {
	switch ($path) {
		case "admin/help#tap_job_mgmt":
			return t("Invites and matches Creative Pros to Jobs.");
		break;
	}
}

function tap_job_mgmt_node_validate($node, $form, &$form_state){}


function tap_job_mgmt_node_presave($node){

	if($node->type=='job'){
		if(!property_exists($node, 'original')){ // A new Job.
			
			$isMatched=false;
			$isInvited=false;

			// Should be a maximum of two loops, because the only possible combination is Invite Candidates + Get Matched.
			foreach($node->field_freelancer_selection['und'] as $type){
				$freelancer_selection_type=$type['value'];		

				if($freelancer_selection_type=='match'){	

					$isMatched=true;
					$topFreelancers=getMatchedFreelancers($node);
		
					addMatchedFreelancersToJob($topFreelancers, $node);
					emailFreelancers($topFreelancers);
					
				}else if($freelancer_selection_type=='invite'){ 

				}else if($freelancer_selection_type=='commission'){
		
				}else if($freelancer_selection_type=='first_candidate'){

				}else if($freelancer_selection_type=='long_term'){

				}
			}

		// 	//Remove duplicates from $job->field_initial_candidates.
			if($isMatched && $isInvited){
		// 		foreach($node->field_invited_candidates['und'] as $invited){
		// 			foreach($node->field_matched_candidates['und'] as $key=>$matched){
		// 				if($matched['target_id']==$invited['target_id']){
		// 					unset($node->field_matched_candidates['und'][$key]);
		// 				}
		// 			}
		// 		}
			}

			//Configure chatroom write and read permissions.
			$node->field_messaging['und'][0]['chatroom']['chatroom_read_only_roles']=array(2=> 2); //Can be read by authenticated users.
			$node->field_messaging['und'][0]['chatroom']['chatroom_write_roles']=array(5=>5, 8=>8); //Can be read by clients and approvedFreelancers.	

			
		}else{ // Editing an existing Job.			

			//---------Need to do reassign otherwise chatroom gets reset and all messages get deleted.---------//
			// $node->field_messaging['und'][0]['chatroom'] is an objects when saving job node after invitng co-workers.
			if(array_key_exists('und', $node->field_messaging) && is_array($node->field_messaging['und'][0]['chatroom'])){
				$node->field_messaging['und'][0]['chatroom']['chatroom_cid'] = $node->original->field_messaging['und'][0]['cid'];
				$node->field_messaging['und'][0]['chatroom']['chatroom_public'] = 0;
				$node->field_messaging['und'][0]['chatroom']['chatroom_delete'] = 0;
	            $node->field_messaging['und'][0]['chatroom']['chatroom_archived'] = 0;
	            $node->field_messaging['und'][0]['chatroom']['chatroom_format'] = 'plain_text';

	            //Configure chatroom write and read permissions.
				$node->field_messaging['und'][0]['chatroom']['chatroom_read_only_roles']=array(2=> 2);
				$node->field_messaging['und'][0]['chatroom']['chatroom_write_roles']=array(5=>5, 8=>8);
        	}
        	//---------------------------------------------------------------------------------------------//
		}		
	}
}


/**
* Implement hook_query_TAG_alter
* Called in getMatchedFreelancers()
*
* @param QueryAlterableInterface $query
*/
function tap_job_mgmt_query_role_filter_alter(QueryAlterableInterface $query){
	$query->leftJoin('users_roles', 'r', 'users.uid = r.uid');
	$and = db_and()
	->condition('r.rid', array_search('approvedFreelancer', user_roles()), '=');
	$query
	->condition($and);
}

