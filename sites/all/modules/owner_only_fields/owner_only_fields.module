<?php 


function owner_only_fields_help($path, $arg) {
	switch ($path) {
		case "admin/help#owner_only_fields":
			return '<p>' . t("Lets only the profile owner see his/her personal fields.") . '</p>';
		break;
	}
}


function owner_only_fields_form_alter(&$form, &$form_state, $form_id){
	//$form['profile-freelancer-field-about-me-add-more-wrapper']['#access'] = FALSE;	

	//Hide fields on account edit page.
	if($form_id=='user_profile_form'){
		file_put_contents('C:\Users\pc\Desktop\yes.txt', print_r($form, TRUE));	
		hide($form['legal']);
		hide($form['mimemail']);

		//Add "Cancel changes" to My Account and My Profile edit forms.
		$form['actions']['cancel_changes'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel Changes'),
			'#access' => TRUE,
			'#weight' => 10,
			'#submit' => array('user_edit_cancel', 'node_form_submit_build_node'),
			'#limit_validation_errors' => array(),
		);	
	
		
	}else if($form_id=='user_login'){
		$form['name']['#title']='E-mail';
		$form['name']['#description']='Enter your e-mail.';

	}else if($form_id=='job_node_form'){
		// hide($form['field_initial_candidates']);
		// hide($form['field_available_candidates']);
		// hide($form['field_final_candidate']);
	}


	//Add "Cancel changes" to node edit form.
	if(array_key_exists('node', $form_state)){
		$node = $form_state['node'];
		if (!isset($node->nid) || isset($node->is_new)) {
		// This is a new node.
		}else {
			// This is not a new node.
			$form['actions']['cancel_changes'] = array(
				'#type' => 'submit',
				'#value' => t('Cancel Changes'),
				'#access' => TRUE,
				'#weight' => 10,
				'#submit' => array('node_edit_cancel', 'node_form_submit_build_node'),
				'#limit_validation_errors' => array(),
			);	
		}
	}
	
}


/**
 * Node edit form cancel button callback.
 */
function node_edit_cancel($form, &$form_state) {
	// $fallback_destinaton = '<front>';
	// If edit, use the node itself as fallback.
	$node=node_load($form['#node']->nid);
	$node_uri=node_uri($node);
	$fallback_destinaton=$node_uri['path'];

	// Go to destination or fallback.
	$url = isset($_GET['destination']) ? $_GET['destination'] : $fallback_destinaton;

	drupal_set_message($node->type." changes cancelled", 'status');
	drupal_goto($url);
}

/**
 * User account/profile edit form cancel button callback.
 */
function user_edit_cancel($form, &$form_state) {
	// $fallback_destinaton = '<front>';
	// If edit, use the node itself as fallback.
	$user=user_load($form['#user']->uid);
	$user_uri=user_uri($user);
	$fallback_destinaton=$user_uri['path'];

	// Go to destination or fallback.
	$url = isset($_GET['destination']) ? $_GET['destination'] : $fallback_destinaton;

	if(arg(3)==null){
		drupal_set_message("Account changes cancelled", 'status');
	}else{
		if(in_array(strtolower(arg(3)), array_map('strtolower', user_roles()))){
			drupal_set_message("Profile changes cancelled", 'status');
		}
	}

	drupal_goto($url);
}

function owner_only_fields_form_profile2_form_alter(&$form, &$form_state){	
	//Hide Profile2 fields on the freelancer registration page.
	if($form["#form_id"] != "user_profile_form"){
		$form['profile_freelancer']['field_about_me']['#access'] = FALSE;
		$form['profile_freelancer']['field_skills']['#access'] = FALSE;
		$form['profile_freelancer']['field_interests']['#access'] = FALSE;
		$form['profile_freelancer']['field_qualifications']['#access'] = FALSE;
		$form['profile_freelancer']['field_profile_picture']['#access'] = FALSE;		
	}	
}


function owner_only_fields_preprocess_page(&$vars, $hook) {
	global $user;
	$first=arg(0);
	$second=arg(1);
	$third=arg(2);
	$fourth=arg(3);

	//Change block title.
	//Not HTML title.
	if($first=='user' && $second=='login'){
		$vars['title']=t('Log In'); 
	}else if($first=='user' && $second=='password'){
		$vars['title']=t('Request new password'); 
	}else if($first=='user' && $second==null && !user_is_logged_in()){
		$vars['title']=t('Registered User Log In'); 
	}
	else if($first=='user' && $third=='edit'){
		$vars['title']=t('Edit My Account'); 

		$types=array();
		foreach(profile2_get_types() as $value){
			array_push($types, strtolower($value->type));
		}
		if(in_array(strtolower($fourth), $types)){
			$vars['title']=t('Edit My Profile'); 
		}

	}else if($first=='node' && $second=='add'){
		if(arg(2)=='portfolio'){
			$vars['title']=t('Create Project'); 
		}
	}
}

function owner_only_fields_node_presave($node){
	file_put_contents('C:\Users\pc\Desktop\node_presave.txt', print_r($node, TRUE));	
	if($node->type=='job'){
		// file_put_contents('C:\Users\pc\Desktop\count.txt', print_r(count($node->field_available_candidates['und']), TRUE));	
		// $data =array();
		// $data['target_id']=39;	
		// array_push($node->field_available_candidates['und'], $data);
		file_put_contents('C:\Users\pc\Desktop\node_insert.txt', print_r($node, TRUE));
		if($node->field_freelancer_selection_proce['und'][0]['value']=='Commission'){	
			//load user with the given id.
			$u=user_load($node->field_initial_candidates['und'][0]['target_id']);
			//Email the freelancer.
			$params['account'] = $u;
		}else if($node->field_freelancer_selection_proce['und'][0]['value']=='Automatic match'){

			$topFreelancers=getAutomaticMatchedFreelancers($node);
			file_put_contents('C:\Users\pc\Desktop\topFreelancers.txt', print_r($topFreelancers, TRUE));
			addInitialFreelancersToJob($topFreelancers, $node);
			emailFreelancers($topFreelancers);
		}
	}
}

function owner_only_fields_node_insert($node){
	// file_put_contents('C:\Users\pc\Desktop\node_insert.txt', print_r($node, TRUE));
	// if($node->field_freelancer_selection_proce['und'][0]['value']=='Commission'){	
	// 	//load user with the given id.
	// 	$u=user_load($node->field_initial_candidates['und'][0]['target_id']);
	// 	//Email the freelancer.
	// 	$params['account'] = $u;
	// }else if($node->field_freelancer_selection_proce['und'][0]['value']=='Automatic match'){

	// 	$topFreelancers=getAutomaticMatchedFreelancers($node);
	// 	file_put_contents('C:\Users\pc\Desktop\topFreelancers.txt', print_r($topFreelancers, TRUE));
	// 	addInitialFreelancersToJob($topFreelancers, $node);
	// 	emailFreelancers($topFreelancers);
	// }
}


function owner_only_fields_mail($key, &$message, $params) {
    $data['user'] = $params['account'];
    $options['language'] = $message['language'];
    user_mail_tokens($variables, $data, $options);
    switch($key) {
      case 'notice':
        $langcode = $message['language']->language;
        $message['subject'] = t('Notification from !site', $variables, array('langcode' => $langcode));
        $message['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, array('langcode' => $langcode));
        break;
    }
}



function emailFreelancers($freelancers){
	// drupal_mail('owner_only_fields', 'notice', $u->mail, user_preferred_language($u), $params);
}

function addInitialFreelancersToJob($freelancers, $job){

	file_put_contents('C:\Users\pc\Desktop\addFreelancers.txt', print_r($freelancers, TRUE));
	$data =array();
	foreach($freelancers as $f){
		$data['target_id']=$f->uid;	
		array_push($job->field_initial_candidates['und'], $data);		
		file_put_contents('C:\Users\pc\Desktop\pushed.txt', print_r($job, TRUE));
	}
}


function sortTopFreelancersByScore(&$comments, $props)
{
    usort($comments, function($a, $b) use ($props) {
        if($a->$props[0] == $b->$props[0])
            return $a->$props[1] < $b->$props[1] ? 1 : -1;
        return $a->$props[0] < $b->$props[0] ? 1 : -1;
    });
}

// -----------Pseudo code for Matching candidates to jobs based on their skillset----------------//
// 1.Get the service type (X) of the job.
// 2.Get all freelancers.
// 3.For each freelancer f, get a count:
// 		jobs tagged X.
//		projects tagged X. 		
// 4.Maintain a collection of top freelancers i.e. highest score (jobCount+projectCount)
// 5.Return top freelancers.
// ----------------------------------END--------------------------------------------------------//
function getAutomaticMatchedFreelancers($node){
	// 1.Get service type X.
	if($skill=$node->field_service_type['und']!=null){
		$skill=$node->field_service_type['und'][0]['tid'];
	}

	// 2.Get all Freelancers.
	$query = new EntityFieldQuery;
	$query
		->entityCondition('entity_type', 'user')
		->addTag('role_filter');
	$results = $query->execute();

	$results=$results['user'];


	define('TOP_THRESHOLD_COUNT', 10);
	$topFreelancers=array(); //User objects with jobCountWithSkill property.

	foreach($results as $freelancer){
		$freelancerid=$freelancer->uid;

		// 3a.Get a count of jobs that have skill X.
		$jobCount=db_query(
			'SELECT COUNT(nid) FROM {node} AS n ' .
			'JOIN {field_data_field_service_type} AS s ' .
			'ON s.entity_id = n.nid AND s.entity_type = :node ' .
			'WHERE n.uid = :uid AND n.type = :type AND s.field_service_type_tid = :tid',
			array(
				':node' => 'node',
				':uid' => $freelancerid,
				':type' => 'job',
				':tid' => $skill,
			)
		)->fetchField();

		// 3b.Get a count of projects that have skill X.
		$projectCount=db_query(
			'SELECT COUNT(nid) FROM {node} AS n ' .
			'JOIN {field_data_field_portfolio_project_skills} AS s ' .
			'ON s.entity_id = n.nid AND s.entity_type = :node ' .
			'WHERE n.uid = :uid AND n.type = :type AND s.field_portfolio_project_skills_tid = :tid',
			array(
				':node' => 'node',
				':uid' => $freelancerid,
				':type' => 'portfolio',
				':tid' => $skill,
			)
		)->fetchField();

		//Score calculated for a freelancer, the higher the better.
		$score = $jobCount*3 + $projectCount;

		//Asigning the score to the User object.
		$u=user_load($freelancerid);
		$u->score=$score;


		//4.Maintain a collection of top freelancers.
		//Already have top freelancers, now find if the current freelancer is stronger that the weakest in topFreelancers.
		if(count($topFreelancers)>=TOP_THRESHOLD_COUNT){ 
			//Find weakest.
			$minScore=PHP_INT_MAX;
			$weakest;
			foreach($topFreelancers as $f){
				if($f->score<$minScore){
					$minScore=$f->score;
					$weakest=$f;
				}
			}

			//Replace only if the current freelancer is stronger than the weakest in topFreelancers.
			if($u->score>$minScore){
				//Remove weakest.
				if(($key = array_search($weakest, $topFreelancers)) !== false) {
				   unset($messages[$key]);
				}		

				//Add the stronger freelancer.
				array_push($topFreelancers, $u);
			}
		}else{
			//Simply add if topFreelancers is not yet filled.
			array_push($topFreelancers, $u);
		}
	}
	
	return $topFreelancers;
}


/**
* Implement hook_query_TAG_alter
* Called in getAutomaticMatchedFreelancers()
*
* @param QueryAlterableInterface $query
*/
function owner_only_fields_query_role_filter_alter(QueryAlterableInterface $query){
	$query->leftJoin('users_roles', 'r', 'users.uid = r.uid');
	$and = db_and()
	->condition('r.rid', array_search('Freelancer', user_roles()), '=');
	$query
	->condition($and);
}


?>

