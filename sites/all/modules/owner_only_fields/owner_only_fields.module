<?php 


function owner_only_fields_help($path, $arg) {
	switch ($path) {
		case "admin/help#owner_only_fields":
			return '<p>' . t("Lets only the profile owner see his/her personal fields.") . '</p>';
		break;
	}
}

function owner_only_fields_process_password_confirm($element) {
	// Renaming password labels on user account edit form.
	$element['pass1']['#title'] = t("New Password");
	$element['pass2']['#title'] = t("Confirm New Password");
	return $element;
}

function owner_only_fields_page_alter(&$page){
	debugLong($page, 'page_alter');

	// content system_main actions submit value

	if(!empty($page['content']['system_main']['actions']['submit']['#value'])){
		if($page['content']['system_main']['actions']['submit']['#value']=='Cancel account'){
			debugShort('page_alter_not_empty');
			$page['content']['system_main']['actions']['submit']['#value']='Delete account';
			drupal_set_title('Are you sure you want to delete your account?');
		}
	}
}

function owner_only_fields_form_alter(&$form, &$form_state, $form_id){
	//$form['profile-freelancer-field-about-me-add-more-wrapper']['#access'] = FALSE;	

	//Hide fields on account edit page.
	if($form_id=='user_profile_form'){
		// file_put_contents('C:\Users\pc\Desktop\yes.txt', print_r($form, TRUE));	
		debugLong($form, 'user_profile_form_alter');
		hide($form['legal']);
		hide($form['mimemail']);

		//Add "Cancel changes" to My Account and My Profile edit forms.
		$form['actions']['cancel_changes'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel Changes'),
			'#access' => TRUE,
			'#weight' => 10,
			'#submit' => array('user_edit_cancel', 'node_form_submit_build_node'),
			'#limit_validation_errors' => array(),
		);	
		
		if(arg(3)==null){
			// Here we need to provide an extra #process handler to allow us to modify
			// the password element that FAPI expands.
			$element_info = element_info('password_confirm');
			$process = $element_info['#process'];
			$process[] = 'owner_only_fields_process_password_confirm';
			$form['account']['pass']['#process'] =  $process;
		}

		if(array_key_exists('cancel', $form['actions'])){
			$form['actions']['cancel']['#value']='Delete account';
		}


		
	}else if($form_id=='user_login'){
		$form['name']['#title']='E-mail';
		$form['name']['#description']='Enter your e-mail.';

	}else if($form_id=='job_node_form'){
		// hide($form['field_initial_candidates']);
		// hide($form['field_available_candidates']);
		// hide($form['field_final_candidate']);
					
		debugLong($form, 'job_node_form_alter');

		$form['field_freelancer_to_commission'] = array(
			'#type' => 'textfield',
			'#default_value' => '',
			'#size' => 60,         // The default size is a bit large...
			'#weight'=>2.5,
			'#attributes' =>array('placeholder' => t('Start Typing Name of Creative Pro Here')),
		);

		$form['field_freelancers_to_invite'] = array(
			'#type' => 'textfield',
			'#default_value' => '',
			'#size' => 60,         // The default size is a bit large...
			'#weight'=>2.6,
			'#attributes' =>array('placeholder' => t('Invite Creative Pros, separate usernames with a comma.')),
		);


	}


	//Add "Cancel changes" to node edit form.
	if(array_key_exists('node', $form_state)){
		$node = $form_state['node'];
		if (!isset($node->nid) || isset($node->is_new)) {
		// This is a new node.
			//Add "Cancel changes" to My Account and My Profile edit forms.
			$form['actions']['cancel_changes'] = array(
				'#type' => 'submit',
				'#value' => t('Cancel Changes'),
				'#access' => TRUE,
				'#weight' => 10,
				'#submit' => array('node_create_cancel', 'node_form_submit_build_node'),
				'#limit_validation_errors' => array(),
			);	
		}else {
			// This is not a new node.
			$form['actions']['cancel_changes'] = array(
				'#type' => 'submit',
				'#value' => t('Cancel Changes'),
				'#access' => TRUE,
				'#weight' => 10,
				'#submit' => array('node_edit_cancel', 'node_form_submit_build_node'),
				'#limit_validation_errors' => array(),
			);	
		}
	}
	
}

function setFinalCandidate($uid, $node){
	if(isset($uid) && isset($node)){
		$node->field_final_candidate['und']=array();
		array_push($node->field_final_candidate['und'], array('target_id'=>$uid));
		field_attach_update('node', $node);		
	}
}


function owner_only_fields_node_validate($node, $form, &$form_state){
	
	debugLong($form_state, "_validate_form_state");
	debugLong($form, "_validate_form");
	debugLong($node, "_validate_node");

	
	if(!array_key_exists('original', $node)){ //Newly created node, not updated node.
		//Invalidate form if no freelancer selected for the commission.
		if(array_key_exists('field_freelancer_selection_type', $form_state['values'])){
			if(strcmp($form_state['values']['field_freelancer_selection_type']['und'][0]['value'], 'commission')==0){
				$username=$form_state['values']['field_freelancer_to_commission'];
				if(empty($username)){
					form_set_error('field_freelancer_to_commission', t('Empty freelancer username field.'));
				}else{ //Determine if entered username is an ApprovedFreelancer
					$freelancer=user_load_by_name($username);

					if($freelancer==false){
						form_set_error('field_freelancer_to_commission', t('Invalid username'));

					}else if(isset($freelancer->roles[array_search('approvedFreelancer', user_roles())])){			
						//Add freelancer to field_final_candidate.
						//Email freelancer.
						//Make the selected freelancer the final candidate i.e. the person for the job.
						debugLong($node, 'node_validate_node');
						debugLong($freelancer, 'node_validate_Freelancer');
						

					}else{
						if(isset($freelancer->roles[array_search('freelancer', user_roles() ) ] ) ){
							form_set_error('field_freelancer_to_commission', t('Freelancer has not yet been approved by Tapcreative.'));
						}else{
							form_set_error('field_freelancer_to_commission', t('The username is not one of a freelancer.'));
						}
					}
				}
			}else if(strcmp($form_state['values']['field_freelancer_selection_type']['und'][0]['value'], 'invite')==0){


				if(!isset($form['field_freelancers_to_invite'])){
					form_set_error('field_freelancers_to_invite', 'Please enter at least one Creative Pro to invite');
				}

				debugLong($form_state['values']['field_freelancers_to_invite'], '_validate_freelancers_to_invite');
				$freelancers_to_invite=explode(',', $form_state['values']['field_freelancers_to_invite']);


				$invalid=array();
				$notApproved=array();
				foreach($freelancers_to_invite as $name){
					$f=user_load_by_name(trim($name));
					if($f==false){
						array_push($invalid, $name);
					}else if(!isset($f->roles[array_search('approvedFreelancer', user_roles())])){
						array_push($notApproved, $name);
					}
				}
				
				if(!empty($invalid)){
					$invalidInStr=implode(', ', $invalid);
					$errorMessage='Not creative pros: '.$invalidInStr;
				}

				if(!empty($notApproved)){
					$notApprovedInStr=implode(', ', $notApproved);
					if(isset($errorMessage)) $errorMessage.="<br>Creative pros not yet approved: ".$notApprovedInStr;
					else $errorMessage="Creative pros not yet approved: ".$notApprovedInStr;
					
				}

				if(!empty($errorMessage)){
					form_set_error('field_freelancers_to_invite', $errorMessage);
				}
				
				$trimmed=array_map('trim', $freelancers_to_invite);
				$form_state['values']['field_freelancers_to_invite']=implode(',', $trimmed);
			}
		}
	}

	

	debugShort('helo');
}

function node_create_cancel($form, &$form_state){
	drupal_set_message('Changes cancelled', 'status');
	drupal_goto('user');
}

/**
 * Node edit form cancel button callback.
 */
function node_edit_cancel($form, &$form_state) {
	// $fallback_destinaton = '<front>';
	// If edit, use the node itself as fallback.
	$node=node_load($form['#node']->nid);
	$node_uri=node_uri($node);
	$fallback_destinaton=$node_uri['path'];

	// Go to destination or fallback.
	$url = isset($_GET['destination']) ? $_GET['destination'] : $fallback_destinaton;

	drupal_set_message($node->type." changes cancelled", 'status');
	drupal_goto($url);
}

/**
 * User account/profile edit form cancel button callback.
 */
function user_edit_cancel($form, &$form_state) {
	// $fallback_destinaton = '<front>';
	// If edit, use the node itself as fallback.
	$user=user_load($form['#user']->uid);
	$user_uri=user_uri($user);
	$fallback_destinaton=$user_uri['path'];

	// Go to destination or fallback.
	$url = isset($_GET['destination']) ? $_GET['destination'] : $fallback_destinaton;

	if(arg(3)==null){
		drupal_set_message("Account changes cancelled", 'status');
	}else{
		if(in_array(strtolower(arg(3)), array_map('strtolower', user_roles()))){
			drupal_set_message("Profile changes cancelled", 'status');
		}
	}

	drupal_goto($url);
}

function owner_only_fields_form_profile2_form_alter(&$form, &$form_state){	
	//Hide Profile2 fields on the freelancer registration page.

	debugLong($form, 'form_profile2_form_alter');

	if($form["#form_id"] != "user_profile_form"){
		$form['profile_freelancer']['field_about_me']['#access'] = FALSE;
		$form['profile_freelancer']['field_skills']['#access'] = FALSE;
		$form['profile_freelancer']['field_interests']['#access'] = FALSE;
		$form['profile_freelancer']['field_qualifications']['#access'] = FALSE;
		$form['profile_freelancer']['field_profile_picture']['#access'] = FALSE;		
	}else{
	//	$form['profile_freelancer']['field_profile_picture']['#access'] = FALSE;		
	}	


}


function owner_only_fields_preprocess_page(&$vars, $hook) {

	debugLong($vars, 'preprocess_page');
	global $user;
	$first=arg(0);
	$second=arg(1);
	$third=arg(2);
	$fourth=arg(3);

	//Change block title.
	//Not HTML title.
	if($first=='user' && $second=='login'){
		$vars['title']=t('Log In'); 
	}else if($first=='user' && $second=='password'){
		$vars['title']=t('Request new password'); 
	}else if($first=='user' && $second==null && !user_is_logged_in()){
		$vars['title']=t('Registered User Log In'); 
	}
	else if($first=='user' && $third=='edit'){
		$vars['title']=t('Edit My Account'); 

		$types=array();
		foreach(profile2_get_types() as $value){
			array_push($types, strtolower($value->type));
		}
		if(in_array(strtolower($fourth), $types)){
			$vars['title']=t('Edit My Profile'); 
		}

	}else if($first=='node' && $second=='add'){
		if(arg(2)=='portfolio'){
			$vars['title']=t('Create Project'); 
		}
	}
}

?>

