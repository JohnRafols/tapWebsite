<?php

/**
 * @file
 * Field that allows User Registration type password field for content types.
 */

/**
 * Implements hook_field_info().
 */
function password_confirm_field_info() {
  return array(
    'password_confirm' => array(
      'label' => t('Password Confirm'),
      'description' => t('This field stores and validates password.'),
      'default_widget' => 'password_confirm',
      'default_formatter' => 'password_confirm_default',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function password_confirm_field_formatter_info() {
  return array(
    'password_confirm_default' => array(
      'label' => t('Password Confirm field'),
      'field types' => array('password_confirm'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function password_confirm_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'password_confirm_default':
      $widget = $instance['widget'];
      $settings = $widget['settings'];
      foreach ($items as $delta => $item) {
        if ($item['pass1']) {
          if (array_key_exists('show_password', $settings)) {
            if ($settings['show_password']) {
              $element[$delta]['#markup'] = '<span>' . $item['pass1'] . '</span>';
            }
            else {
              $element[$delta]['#markup'] = '<span>••••••••••••••••</span>';
            }
          }
          else {
            // If settings does not have show password.
            $element[$delta]['#markup'] = '<span>••••••••••••••••</span>';
          }
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function password_confirm_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $description = t('Password will remain unchanged if left blank.');
  $element['pass1'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#required' => $element['#required'],
    '#attributes' => array('class' => array('password-field')),
  );
  $element['pass2'] = array(
    '#type' => 'password',
    '#title' => t('Confirm password'),
    '#required' => $element['#required'],
    '#description' => $description,
    '#attributes' => array('class' => array('password-confirm')),
  );
  $element = user_form_process_password_confirm($element);
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function password_confirm_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_validate().
 */
function password_confirm_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $pass1 = trim($item['pass1']);
    $pass2 = trim($item['pass2']);
    if (!empty($pass1) || !empty($pass2)) {
      if (strcmp($pass1, $pass2)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => "password_invalid",
          'message' => t('The specified passwords do not match.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function password_confirm_field_is_empty($item, $field) {
  if (empty($item['pass1'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function password_confirm_field_widget_info() {
  return array(
    'password_confirm' => array(
      'label' => t('Password Confirm'),
      'field types' => array('password_confirm'),
    ),
  );
}

/**
 * Implements hook_field_presave().
 */
function password_confirm_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (count($items) == 0) {
    if (array_key_exists('original', $entity)) {
      if (array_key_exists($langcode, $entity->original->{$field['field_name']})) {
        $items = $entity->original->{$field['field_name']}[$langcode];
      }
    }
  }
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  if (array_key_exists('encrypt_password', $settings)) {
    if ($settings['encrypt_password']) {
      require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
      foreach ($items as $delta => $item) {
        $item['pass1'] = _password_crypt('sha512', $item['pass1'], _password_generate_salt(DRUPAL_HASH_COUNT));
        $items[$delta] = $item;
      }
    }
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function password_confirm_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $encrypt_password_default = 1;
  if (array_key_exists('encrypt_password', $settings)) {
    $encrypt_password_default = $settings['encrypt_password'];
  }
  $show_password_default = 0;
  if (array_key_exists('show_password', $settings)) {
    $show_password_default = $settings['show_password'];
  }
  $form = array();
  $form['encrypt_password'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save Password in encrypted form.'),
    '#default_value' => $encrypt_password_default,
  );
  $form['show_password'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show password.'),
    '#default_value' => $show_password_default,
  );
  return $form;
}
