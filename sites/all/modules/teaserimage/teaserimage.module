<?php

/**
 * @file
 * A module that allows thumbnail generation for teasers from pictures attached
 * to the nodes(this option will be removed in the near future) or inserted in their body.
 */

/**
 * Implements hook_menu().
 */
function teaserimage_menu() {
  $items['admin/config/media/teaserimage'] = array(
    'title' => 'Teaser Image',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teaserimage_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Define thumbnails related settings : size, types, preset.',
    'file' => 'teaserimage.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function teaserimage_form_node_type_form_alter(&$form, $form_state) {
  $type = $form['#node_type']->type;
  $form['teaserimage'] = array(
    '#group' => 'additional_settings',
    '#type' => 'fieldset',
    '#title' => t('Teaser Image'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attached' => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'teaserimage') . '/teaserimage.js',
      ),
    ),
  );
  if (!variable_get('teaserimage_img_style', FALSE)) {
    $form['teaserimage']['message'] = array(
      '#markup' => t('Please set <a href="@config_page">default settings</a> of the module first.', array('@config_page' => '/admin/config/media/teaserimage')),
    );
    return;
  }
  $form['teaserimage']['teaserimage'] = array(
    '#type' => 'radios',
    '#title' => t('Generate thumbnail'),
    '#default_value' => variable_get('teaserimage_' . $type, 0),
    '#options' => array(t('Disabled'), t('Enabled')),
    '#description' => t('Enable to use Teaser Image functionalities.'),
  );
  $form['teaserimage']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      'invisible' => array(
        ':input[name="teaserimage"]' => array('value' => 0),
      ),
    ),
  );
  $form['teaserimage']['settings']['teaserimage_imagefield'] = array(
    '#type' => 'radios',
    '#title' => t('Image from attached image-field(s)'),
    '#options' => array(
      t('Do not use'),
      t('If not found in node body'),
      t('From a fields only'),
    ),
    '#default_value' => variable_get('teaserimage_imagefield_' . $type, 0),
    '#description' => t('The thumbnail may be built from image-field if possible (or if not found in node body) as well for teasers and RSS feeds (not views fields).'),
  );
  $form['teaserimage']['settings']['default_img'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default Image settings'),
  );
  $form['teaserimage']['settings']['default_img']['teaserimage_default_img'] = array(
    '#title' => t('Image file'),
    '#type' => 'managed_file',
    '#description' => t('If no suitable image found, this image will be selected as image for teaser.'),
    '#default_value' => variable_get('teaserimage_default_img_' . $type, 0),
    '#upload_validators' => array('file_validate_is_image' => array()),
    '#upload_location' => 'public://teaserimage/',
  );
  if ($image_fid = variable_get('teaserimage_default_img_' . $type, FALSE)) {
    $image = file_load($image_fid);
    $style = variable_get('teaserimage_img_style_' . $type, variable_get('teaserimage_img_style', 0));
    $form['teaserimage']['settings']['default_img']['default_preview'] = array(
      '#markup' => theme('image_style', array(
          'style_name' => $style,
          'path' => $image->uri,
          'title' => t('Current image preview'),
          'attributes' => array('class' => array('teaserimage-default')),
        )),
    );
  }
  $form['teaserimage']['settings']['teaserimage_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display thumbnail as link'),
    '#default_value' => variable_get('teaserimage_link_' . $type, 1),
    '#description' => t('Use this setting to display the thumbnail as a link in teasers and RSS feeds.'),
  );

  $presets = image_style_options(TRUE);

  $form['teaserimage']['settings']['teaserimage_img_style'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail preset'),
    '#default_value' => variable_get('teaserimage_img_style_' . $type, variable_get('teaserimage_img_style', 0)),
    '#options' => $presets,
    '#description' => t('The image style you want to use to build the thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );
  $form['teaserimage']['settings']['teaserimage_css_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS class(es)'),
    '#default_value' => variable_get('teaserimage_css_classes_' . $type, variable_get('teaserimage_css_classes', 'teaserimage')),
    '#description' => t('CSS classes for a thumbnails.'),
    '#element_validate' => array('_teaserimage_validate_css_class'),
  );
  $form['teaserimage']['settings']['teaserimage_min_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum height'),
    '#default_value' => variable_get('teaserimage_min_height_' . $type, variable_get('teaserimage_min_height', 0)),
    '#maxlength' => '50',
    '#size' => '10',
    '#description' => t('The minimum height (in px) for a picture to be used as a thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );
  $form['teaserimage']['settings']['teaserimage_min_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width'),
    '#default_value' => variable_get('teaserimage_min_width_' . $type, variable_get('teaserimage_min_width', 0)),
    '#maxlength' => '50',
    '#size' => '10',
    '#description' => t('The minimum width (in px) for a picture to be used as a thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );
  $form['teaserimage']['settings']['teaserimage_rebuild'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process all nodes in this content type after saving the form.'),
    '#default_value' => 0,
    '#description' => t('Use this option if you want to start generating thumbnails for all existing nodes of this type (once after saving the form). Otherwise, the generation will take place only at the time of creation/updating nodes.'),
  );

  $form['#validate'][] = 'teaserimage_type_form_validate';
  $form['#submit'][] = 'teaserimage_type_form_submit';
}

function teaserimage_type_form_validate($form, &$form_state) {
  global $conf;
  $type = $form['#node_type']->type;
  $array = array('teaserimage_img_style', 'teaserimage_css_classes', 'teaserimage_min_height', 'teaserimage_min_width');
  foreach ($array as $key) {
    if ($form_state['values'][$key] == variable_get($key, 0)) {
      unset($form_state['values'][$key]);
      if (isset($conf[$key . '_' . $type])) {
        variable_del($key . '_' . $type);
      }
    }
  }
  $form_state['storage']['values'] = array(
    'teaserimage_rebuild' => $form_state['values']['teaserimage_rebuild'],
    'teaserimage_default_img_old' => variable_get('teaserimage_default_img_' . $type, 0),
  );
  unset($form_state['values']['teaserimage_rebuild']);
}

function teaserimage_type_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $store_values = $form_state['storage']['values'];
  $type = $form['#node_type']->type;

  if ($values['teaserimage'] && $store_values['teaserimage_rebuild']) {
    $data = teaserimage_load_nids_by_type($type);
    $batch = array(
      'title' => t('Node processing'),
      'operations' => array(
        array('teaserimage_rebuild_nodes', array($data)),
      ),
      'finished' => 'teaserimage_batch_finished',
      'file' => drupal_get_path('module', 'teaserimage') . '/teaserimage.pages.inc',
    );

    batch_set($batch);
    batch_process();
  }

  // Default Image proccess.
  if ($store_values['teaserimage_default_img_old'] != $values['teaserimage_default_img']) {
    if ($values['teaserimage_default_img'] != 0) {
      $file = file_load($values['teaserimage_default_img']);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      file_usage_add($file, 'teaserimage', $type, 1);

      drupal_set_message(t('The image @image_name was uploaded and saved as default teaser image for the type @type.', array('@image_name' => $file->filename, '@type' => $type)));
    }
    elseif ($values['teaserimage_default_img'] == 0) {
      $fid = $store_values['teaserimage_default_img_old'];
      $file = $fid ? file_load($fid) : FALSE;
      if ($file) {
        file_usage_delete($file, 'teaserimage', $type, 1);
        file_delete($file);
      }

      drupal_set_message(t('The image @image_name was removed.', array('@image_name' => $file->filename)));
    }
  }
}

/**
 * Return all node ids of a particular type.
 */
function teaserimage_load_nids_by_type($type) {
  // returns an indexed array
  $nids = db_select('node', 'n')->fields('n', array('nid'))->condition('n.type', $type)->execute()->fetchCol();
  return $nids;
}

/**
 * Process every item in batch
 */
function teaserimage_rebuild_nodes($nodes, &$context) {
  $limit = 20;

  if (empty($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = $context['sandbox']['thumbnails'] = 0;
    $context['sandbox']['max'] = count($nodes);
  }
  if (empty($context['sandbox']['items'])) {
    $context['sandbox']['items'] = $nodes;
  }

  $counter = 0;
  if (!empty($context['sandbox']['items'])) {
    if ($context['sandbox']['progress'] != 0) {
      array_splice($context['sandbox']['items'], 0, $limit);
    }

    foreach ($context['sandbox']['items'] as $nid) {
      if ($counter != $limit) {

        $node = node_load($nid);
        $thumb = _teaserimage_get_thumbnail($node);
        if ($thumb) {
          $context['sandbox']['thumbnails']++;
        }

        $counter++;
        $context['sandbox']['progress']++;

        $context['message'] = t('Now processing node %progress of %count', array('%progress' => $context['sandbox']['progress'], '%count' => $context['sandbox']['max']));
        $context['results']['processed'] = $context['sandbox']['progress'];
        $context['results']['thumbnails'] = $context['sandbox']['thumbnails'];
      }
    }
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implements hook_node_insert().
 */
function teaserimage_node_insert($node) {
  if (variable_get('teaserimage_' . $node->type, FALSE)) {
    _teaserimage_get_thumbnail($node);
  }
}

/**
 * Implements hook_node_update().
 */
function teaserimage_node_update($node) {
  teaserimage_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function teaserimage_node_delete($node) {
  if (variable_get('teaserimage_' . $node->type, FALSE)) {
    _teaserimage_delete_thumb($node->nid);
  }
}

/**
 * Implements hook_node_load().
 */
function teaserimage_node_load($nodes) {
  foreach ($nodes as $node) {
    if (variable_get('teaserimage_' . $node->type, FALSE)) {
      $teaserimage = db_query("SELECT filepath FROM {teaserimage} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();

      if (empty($teaserimage) && $default_img_fid = variable_get('teaserimage_default_img_' . $node->type, 0)) {
        if ($file = file_load($default_img_fid)) {
          $teaserimage = $file->uri;
        }
      }
      $node->teaserimage = $teaserimage;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function teaserimage_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $type) {
    if (variable_get('teaserimage_' . $type->type, FALSE)) {
      $extra['node'][$type->type]['display']['teaserimage'] = array(
        'label' => t('Teaser Image'),
        'description' => t('Image for a node teasers and rss.'),
        'weight' => -10,
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function teaserimage_node_view($node, $view_mode) {
  if (variable_get('teaserimage_' . $node->type, FALSE) && in_array($view_mode, array('teaser', 'rss')) && $node->teaserimage) {
    // Build the thumbnail
    $thumbnail = theme('teaserimage_thumbnail', array('node' => $node));
    if (variable_get('teaserimage_link_' . $node->type, 1)) {
      $thumbnail = l($thumbnail, 'node/' . $node->nid, array('html' => TRUE));
    }
    $node->content['teaserimage']['#markup'] = $thumbnail;
    // We then remove media (both flash and pictures) from the teaser
    $body = &$node->content['body'][0]['#markup'];
    $body = _teaserimage_strip_media($body);
  }
}

/**
 * Implements hook_theme().
 */
function teaserimage_theme() {
  return array(
    'teaserimage_thumbnail' => array(
      'variables' => array(
        'node' => NULL,
      ),
    ),
  );
}

/**
 * Output the thumbnail picture
 */
function theme_teaserimage_thumbnail($vars) {
  $node = $vars['node'];
  $thumbnail = $node->teaserimage;

  // We define if we prepend a thumbnail to the teaser
  if (!empty($thumbnail)) {
    $preset = variable_get('teaserimage_img_style_' . $node->type, variable_get('teaserimage_img_style', 0));

    $thumbnail_options = array(
      'style_name' => $preset,
      'path' => $thumbnail,
      'alt' => $node->title,
      'title' => $node->title,
    );
    if ($class = variable_get('teaserimage_css_classes_' . $node->type, variable_get('teaserimage_css_classes', 'teaserimage'))) {
      $thumbnail_options['attributes']['class'] = $class;
    }
    $thumbnail = theme('image_style', $thumbnail_options);
  }

  return $thumbnail;
}

/**
 * Delete any thumbnail reference in the db for the specified node.
 */
function _teaserimage_delete_thumb($nid) {
  $db_img = db_query("SELECT * FROM {teaserimage} WHERE nid = :nid", array(':nid' => $nid))->fetchObject();
  if ($db_img) {
    db_delete('teaserimage')->condition('nid', $db_img->nid)->execute();
  }
}

/**
 * Retrieve all the URL of local pictures in a HTML string (i.e. <img> with a
 * relative path).
 */
function _teaserimage_get_local_images($text) {
  $pattern = '/<img[^>]+src="([^"]+)/i';
  $local_pics = array();

  if (preg_match_all($pattern, $text, $images)) {
    $public_path = variable_get('file_public_path', conf_path() . '/files');
    $private_path = variable_get('file_private_path', FALSE) ? 'system/files' : FALSE;

    foreach ($images[1] as $src) {
      // We strip the host address form the url (we want relative paths)
      $src = str_replace($GLOBALS['base_root'], '', $src);
      $schema = FALSE;
      if (strpos($src, $public_path) === 1) {
        $schema = 'public';
      }
      elseif ($private_path && strpos($src, $private_path) === 1) {
        $schema = 'private';
      }

      if ($schema) {
        $path = ($schema == 'public') ? $public_path : $private_path;
        $pattern = "/^\/" . str_replace('/', '\/', $path) . "\/(.*)$/";
        $src = preg_replace($pattern, "$1", $src);
        $local_pics[] = $schema . '://' . $src;
      }
    }
  }
  return $local_pics;
}

/**
 * We retrieve the mininum size for a picture to be considered suitable
 */
function _teaserimage_get_min_sizes($type) {
  return array(
    'min_height' => variable_get('teaserimage_min_height_' . $type, variable_get('teaserimage_min_height', 0)),
    'min_width' => variable_get('teaserimage_min_width_' . $type, variable_get('teaserimage_min_width', 0)),
  );
}

/**
 * Retrieve the filepath of the picture used for building the thumbnail
 */
function _teaserimage_get_thumbnail($node) {
  $mode = (int) variable_get('teaserimage_imagefield_' . $node->type, 0);
  $thumbnail = FALSE;
  if (!$mode || $mode === 1) {
    $thumbnail = _teaserimage_get_thumbnail_from_body($node);
  }
  if ($mode == 2 || ($mode === 1 && !$thumbnail)) {
    $thumbnail = _teaserimage_get_thumbnail_from_field($node);
  }
  if (!$thumbnail && isset($node->teaserimage) && !empty($node->teaserimage)) {
    _teaserimage_delete_thumb($node->nid);
  }

  return $thumbnail;
}

/**
 * Process a node on submit: find if there is a valid picture for building a
 * thumbnail and stores a reference to it.
 */
function _teaserimage_get_thumbnail_from_body($node) {
  $body = field_get_items('node', $node, 'body');
  $field = isset($body[0]['safe_value']) ? $body[0]['safe_value'] : check_markup($body[0]['value'], $body[0]['format']);
  // Retrieve the local pictures
  if ($local_pics = _teaserimage_get_local_images($field)) {
    $min_size = _teaserimage_get_min_sizes($node->type);
    // Browse the array until we find a valid local file with the right dimensions
    $i = 0;
    do {
      // Check that it is a picture
      if ($image_info = image_get_info($local_pics[$i])) {
        // Check for minimum width and height
        if (($image_info['width'] >= $min_size['min_width']) && ($image_info['height'] >= $min_size['min_height'])) {
          _teaserimage_save_thumb($node->nid, $local_pics[$i]);
          return TRUE;
        }
      }
      $i++;
    } while ($i < count($local_pics));
  }
  else {
    _teaserimage_delete_thumb($node->nid);
  }
  return FALSE;
}

/**
 * Retrieve images from an image_field(s).
 */
function _teaserimage_get_thumbnail_from_field($node) {
  $query = db_select('file_managed', 'fm');
  $query->innerJoin('file_usage', 'fu', 'fm.fid = fu.fid');
  $query->fields('fm', array('uri'));
  $query->condition('fu.id', $node->nid);
  $query->condition('fu.type', 'node');
  $query->condition('fm.status', 1);

  if ($files = $query->execute()) {
    $min_size = _teaserimage_get_min_sizes($node->type);
    foreach ($files as $file) {
      if ($image_info = image_get_info($file->uri)) {
        // We check for minimum width and height
        if (($image_info['width'] >= $min_size['min_width']) && ($image_info['height'] >= $min_size['min_height'])) {
          _teaserimage_save_thumb($node->nid, $file->uri);
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Save a reference to the picture selected to build the thumbnail in the db.
 */
function _teaserimage_save_thumb($nid, $filepath) {
  $num_rows = db_query("SELECT count(*) FROM {teaserimage} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  if ($num_rows) {
    db_update('teaserimage')->fields(array(
        'filepath' => $filepath,
      ))->condition('nid', $nid)->execute();
  }
  else {
    db_insert('teaserimage')->fields(array(
        'nid' => $nid,
        'filepath' => $filepath,
      ))->execute();
  }
}

/**
 * Remove media (<img> and <object>) from a string.
 */
function _teaserimage_strip_media($string) {
  // We remove all the pictures from the text
  $img_pattern = "/<img[^>]+src=\"[^\"]+\"[^>]*>/i";
  // We now remove the object blocks (video, flash)
  $object_pattern = "/<object[0-9 a-z_?*=\":\-\/\.#\,<>\\n\\r\\t]+<\/object>/smi";

  return preg_replace(array($img_pattern, $object_pattern), '', $string);
}

/**
 * Validate the entered css class(es) from the submitted format settings.
 */
function _teaserimage_validate_css_class($element, &$form_state) {
  if (!empty($element['#value']) && !preg_match('!^[A-Za-z0-9-_ ]+$!', $element['#value'])) {
    form_error($element, t('The css class must include only letters, numbers, underscores and dashes.'));
  }
}

/**
 * Implements hook_views_api().
 *
 * @return Array with Views API version.
 */
function teaserimage_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'teaserimage') . '/views',
  );
}

