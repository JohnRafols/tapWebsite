<?php

/**
 * @file
 * Contains tests for textfield_confirm.module.
 */

/**
 * Tests basic functionality.
 */
class TextfieldConfirmTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Basic functionality tests.',
      'description' => "Tests that things don't explode",
      'group' => 'Textfield confirm',
    );
  }

  public function setUp() {
    // This is kind of nasty, but I don't feel like making at third class for
    // these stupid tests.
    if ($args = func_get_args()) {
      return parent::setUp($args);
    }
    parent::setUp('textfield_confirm_test');
  }

  /**
   * Test that things don't get all splody.
   */
  public function test() {
    $this->drupalGet('test1');
    $this->checkLabels();
    $this->checkRequiredValidation();

    // Test basic form submit.
    $this->assertPostValue('testfield', 'Hello world');

    // Test that '0' works as an input.
    $this->assertPostValue('testfield', '0');

    // Test that the fields have to have the same value.
    $edit = array('testfield[text1]' => 'value1', 'testfield[text2]' => 'value2');
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertText(t('The specified fields do not match.'));
    $this->assertHasClass('testfield[text1]', 'error');
    $this->assertHasClass('testfield[text2]', 'error');
  }

  /**
   * Checks that the titles and descriptions are showing up.
   */
  protected function checkLabels() {
    $this->assertText(t('The wrapper title'));
    $this->assertText(t('The wrapper description.'));
    $this->assertText(t('Field one'));
    $this->assertText(t('Field two'));
    $this->assertText(t('This is the first field.'));
    $this->assertText(t('This is the second field. The value must match the first field.'));
    $this->assertHasClass('testfield[text1]', 'textfield-confirm-field');
    $this->assertHasClass('testfield[text2]', 'textfield-confirm-confirm');
    $this->assertHasClass('testfield[text1]', 'required');
    $this->assertHasClass('testfield[text2]', 'required');
  }

  /**
   * Checks the required validation.
   */
  protected function checkRequiredValidation() {
    $this->drupalPost(NULL, array(), t('Submit'));
    $this->assertText(t('The wrapper title field is required.'));
    $this->assertHasClass('testfield[text1]', 'error');
    $this->assertHasClass('testfield[text2]', 'error');
  }

  /**
   * Asserts that a form field has a given class.
   *
   * @param string $name
   *   The name of the form field.
   * @param string $class
   *   The class to check for.
   */
  protected function assertHasClass($name, $class) {
    $classes = explode(' ', (string) $this->getFieldAttribute($name, 'class'));
    $this->assertTrue(in_array($class, $classes), format_string('@field has class @class.', array('@field' => $name, '@class' => $class)));
  }

  /**
   * Returns the attribute value of an input element.
   *
   * @param string $name
   *   The name attribute of the form field.
   * @param string $attribute
   *   The attribute to retrieve.
   *
   * @return string|bool
   *   The attribute value, or false if it doesn't exist.
   */
  protected function getFieldAttribute($name, $attribute) {
    $xpath = $this->constructFieldXpath('name', $name);
    $field = $this->xpath($xpath);
    return isset($field[0][$attribute]) ? (string) $field[0][$attribute] : FALSE;
  }

  /**
   * Checks that a value was input and received by the submit handler.
   *
   * @var string $value
   *   The form input value.
   */
  protected function assertPostValue($field, $value) {
    $edit = array($field . '[text1]' => $value, $field . '[text2]' => $value);
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertText(t('The input value was: @value.', array('@value' => $value)));
  }

}

/**
 * Tests emailfield_confirm functionality.
 */
class TextfieldConfirmEmailfieldTestCase extends TextfieldConfirmTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Emailfield tests.',
      'description' => "Tests that things don't explode",
      'group' => 'Textfield confirm',
      'dependencies' => array('elements'),
    );
  }

  public function setUp() {
    parent::setUp('textfield_confirm_test', 'elements');
  }

  /**
   * Some basic behavior tests.
   */
  public function test() {
    $this->drupalGet('test2');
    $this->checkLabels();
    $this->checkRequiredValidation();

    // Test basic form submit.
    $this->assertPostValue('testfield', 'admin@example.com');

    // Test that the fields have to have the same value.
    $edit = array('testfield[text1]' => 'admin@example.com', 'testfield[text2]' => 'bob@example.com');
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertText(t('The specified fields do not match.'));
    $this->assertHasClass('testfield[text1]', 'error');
    $this->assertHasClass('testfield[text2]', 'error');

    // Test that email validation works.
    $edit = array('testfield[text1]' => 'beep', 'testfield[text2]' => 'beep');
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertText(t('The e-mail address @email is not valid.', array('@email' => 'beep')));
    $this->assertHasClass('testfield[text1]', 'error');
    $this->assertHasClass('testfield[text2]', 'error');

    // Test that email validation and matching validation both execute at the
    // same time.
    $edit = array('testfield[text1]' => 'beep', 'testfield[text2]' => 'boop');
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertText(t('The specified fields do not match.'));
    $this->assertHasClass('testfield[text1]', 'error');
    $this->assertHasClass('testfield[text2]', 'error');
  }

}
